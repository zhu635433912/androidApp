package com.deguan.xuelema.androidapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.deguan.xuelema.androidapp.entities.TeacherEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEACHER_ENTITY".
*/
public class TeacherEntityDao extends AbstractDao<TeacherEntity, Void> {

    public static final String TABLENAME = "TEACHER_ENTITY";

    /**
     * Properties of entity TeacherEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property User_id = new Property(0, String.class, "user_id", false, "USER_ID");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property Gender = new Property(3, String.class, "gender", false, "GENDER");
        public final static Property Education = new Property(4, String.class, "education", false, "EDUCATION");
        public final static Property User_headimg = new Property(5, String.class, "user_headimg", false, "USER_HEADIMG");
        public final static Property Date_joined = new Property(6, String.class, "date_joined", false, "DATE_JOINED");
        public final static Property Speciality = new Property(7, String.class, "speciality", false, "SPECIALITY");
        public final static Property Speciality_name = new Property(8, String.class, "speciality_name", false, "SPECIALITY_NAME");
        public final static Property Fee = new Property(9, String.class, "fee", false, "FEE");
        public final static Property Years = new Property(10, String.class, "years", false, "YEARS");
        public final static Property Apply_job = new Property(11, String.class, "apply_job", false, "APPLY_JOB");
        public final static Property Demand_fee = new Property(12, String.class, "demand_fee", false, "DEMAND_FEE");
        public final static Property Service_type = new Property(13, String.class, "service_type", false, "SERVICE_TYPE");
        public final static Property Service_type_txt = new Property(14, String.class, "service_type_txt", false, "SERVICE_TYPE_TXT");
        public final static Property Grade_type_txt = new Property(15, String.class, "grade_type_txt", false, "GRADE_TYPE_TXT");
        public final static Property Is_passed = new Property(16, String.class, "is_passed", false, "IS_PASSED");
        public final static Property Haoping_num = new Property(17, String.class, "haoping_num", false, "HAOPING_NUM");
        public final static Property Order_rank = new Property(18, String.class, "order_rank", false, "ORDER_RANK");
        public final static Property Distance = new Property(19, String.class, "distance", false, "DISTANCE");
        public final static Property Status1 = new Property(20, String.class, "status1", false, "STATUS1");
        public final static Property Status2 = new Property(21, String.class, "status2", false, "STATUS2");
        public final static Property Signature = new Property(22, String.class, "signature", false, "SIGNATURE");
    };


    public TeacherEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TeacherEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEACHER_ENTITY\" (" + //
                "\"USER_ID\" TEXT," + // 0: user_id
                "\"USERNAME\" TEXT," + // 1: username
                "\"NICKNAME\" TEXT," + // 2: nickname
                "\"GENDER\" TEXT," + // 3: gender
                "\"EDUCATION\" TEXT," + // 4: education
                "\"USER_HEADIMG\" TEXT," + // 5: user_headimg
                "\"DATE_JOINED\" TEXT," + // 6: date_joined
                "\"SPECIALITY\" TEXT," + // 7: speciality
                "\"SPECIALITY_NAME\" TEXT," + // 8: speciality_name
                "\"FEE\" TEXT," + // 9: fee
                "\"YEARS\" TEXT," + // 10: years
                "\"APPLY_JOB\" TEXT," + // 11: apply_job
                "\"DEMAND_FEE\" TEXT," + // 12: demand_fee
                "\"SERVICE_TYPE\" TEXT," + // 13: service_type
                "\"SERVICE_TYPE_TXT\" TEXT," + // 14: service_type_txt
                "\"GRADE_TYPE_TXT\" TEXT," + // 15: grade_type_txt
                "\"IS_PASSED\" TEXT," + // 16: is_passed
                "\"HAOPING_NUM\" TEXT," + // 17: haoping_num
                "\"ORDER_RANK\" TEXT," + // 18: order_rank
                "\"DISTANCE\" TEXT," + // 19: distance
                "\"STATUS1\" TEXT," + // 20: status1
                "\"STATUS2\" TEXT," + // 21: status2
                "\"SIGNATURE\" TEXT);"); // 22: signature
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEACHER_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TeacherEntity entity) {
        stmt.clearBindings();
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(1, user_id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(4, gender);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(5, education);
        }
 
        String user_headimg = entity.getUser_headimg();
        if (user_headimg != null) {
            stmt.bindString(6, user_headimg);
        }
 
        String date_joined = entity.getDate_joined();
        if (date_joined != null) {
            stmt.bindString(7, date_joined);
        }
 
        String speciality = entity.getSpeciality();
        if (speciality != null) {
            stmt.bindString(8, speciality);
        }
 
        String speciality_name = entity.getSpeciality_name();
        if (speciality_name != null) {
            stmt.bindString(9, speciality_name);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(10, fee);
        }
 
        String years = entity.getYears();
        if (years != null) {
            stmt.bindString(11, years);
        }
 
        String apply_job = entity.getApply_job();
        if (apply_job != null) {
            stmt.bindString(12, apply_job);
        }
 
        String demand_fee = entity.getDemand_fee();
        if (demand_fee != null) {
            stmt.bindString(13, demand_fee);
        }
 
        String service_type = entity.getService_type();
        if (service_type != null) {
            stmt.bindString(14, service_type);
        }
 
        String service_type_txt = entity.getService_type_txt();
        if (service_type_txt != null) {
            stmt.bindString(15, service_type_txt);
        }
 
        String grade_type_txt = entity.getGrade_type_txt();
        if (grade_type_txt != null) {
            stmt.bindString(16, grade_type_txt);
        }
 
        String is_passed = entity.getIs_passed();
        if (is_passed != null) {
            stmt.bindString(17, is_passed);
        }
 
        String haoping_num = entity.getHaoping_num();
        if (haoping_num != null) {
            stmt.bindString(18, haoping_num);
        }
 
        String order_rank = entity.getOrder_rank();
        if (order_rank != null) {
            stmt.bindString(19, order_rank);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(20, distance);
        }
 
        String status1 = entity.getStatus1();
        if (status1 != null) {
            stmt.bindString(21, status1);
        }
 
        String status2 = entity.getStatus2();
        if (status2 != null) {
            stmt.bindString(22, status2);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(23, signature);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public TeacherEntity readEntity(Cursor cursor, int offset) {
        TeacherEntity entity = new TeacherEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gender
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // education
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_headimg
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // date_joined
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // speciality
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // speciality_name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fee
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // years
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // apply_job
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // demand_fee
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // service_type
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // service_type_txt
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // grade_type_txt
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // is_passed
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // haoping_num
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // order_rank
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // distance
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // status1
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // status2
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // signature
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TeacherEntity entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGender(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEducation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_headimg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate_joined(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSpeciality(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSpeciality_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFee(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setYears(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setApply_job(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDemand_fee(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setService_type(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setService_type_txt(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGrade_type_txt(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIs_passed(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setHaoping_num(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOrder_rank(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDistance(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setStatus1(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setStatus2(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSignature(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(TeacherEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(TeacherEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
