package com.deguan.xuelema.androidapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.deguan.xuelema.androidapp.entities.XuqiuEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "XUQIU_ENTITY".
*/
public class XuqiuEntityDao extends AbstractDao<XuqiuEntity, Void> {

    public static final String TABLENAME = "XUQIU_ENTITY";

    /**
     * Properties of entity XuqiuEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Publisher_id = new Property(0, String.class, "publisher_id", false, "PUBLISHER_ID");
        public final static Property Publisher_name = new Property(1, String.class, "publisher_name", false, "PUBLISHER_NAME");
        public final static Property Publisher_headimg = new Property(2, String.class, "publisher_headimg", false, "PUBLISHER_HEADIMG");
        public final static Property Publisher_gender = new Property(3, String.class, "publisher_gender", false, "PUBLISHER_GENDER");
        public final static Property Id = new Property(4, String.class, "id", false, "ID");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property Service_type_txt = new Property(6, String.class, "service_type_txt", false, "SERVICE_TYPE_TXT");
        public final static Property Grade_id = new Property(7, String.class, "grade_id", false, "GRADE_ID");
        public final static Property Grade_name = new Property(8, String.class, "grade_name", false, "GRADE_NAME");
        public final static Property Course_id = new Property(9, String.class, "course_id", false, "COURSE_ID");
        public final static Property Course_name = new Property(10, String.class, "course_name", false, "COURSE_NAME");
        public final static Property Education_id = new Property(11, String.class, "education_id", false, "EDUCATION_ID");
        public final static Property Education_name = new Property(12, String.class, "education_name", false, "EDUCATION_NAME");
        public final static Property Fee = new Property(13, String.class, "fee", false, "FEE");
        public final static Property Duration = new Property(14, String.class, "duration", false, "DURATION");
        public final static Property Gender = new Property(15, String.class, "gender", false, "GENDER");
        public final static Property Age = new Property(16, String.class, "age", false, "AGE");
        public final static Property Created = new Property(17, String.class, "created", false, "CREATED");
        public final static Property Lng = new Property(18, String.class, "lng", false, "LNG");
        public final static Property Lat = new Property(19, String.class, "lat", false, "LAT");
        public final static Property Distance = new Property(20, String.class, "distance", false, "DISTANCE");
        public final static Property Status = new Property(21, String.class, "status", false, "STATUS");
    };


    public XuqiuEntityDao(DaoConfig config) {
        super(config);
    }
    
    public XuqiuEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"XUQIU_ENTITY\" (" + //
                "\"PUBLISHER_ID\" TEXT," + // 0: publisher_id
                "\"PUBLISHER_NAME\" TEXT," + // 1: publisher_name
                "\"PUBLISHER_HEADIMG\" TEXT," + // 2: publisher_headimg
                "\"PUBLISHER_GENDER\" TEXT," + // 3: publisher_gender
                "\"ID\" TEXT," + // 4: id
                "\"CONTENT\" TEXT," + // 5: content
                "\"SERVICE_TYPE_TXT\" TEXT," + // 6: service_type_txt
                "\"GRADE_ID\" TEXT," + // 7: grade_id
                "\"GRADE_NAME\" TEXT," + // 8: grade_name
                "\"COURSE_ID\" TEXT," + // 9: course_id
                "\"COURSE_NAME\" TEXT," + // 10: course_name
                "\"EDUCATION_ID\" TEXT," + // 11: education_id
                "\"EDUCATION_NAME\" TEXT," + // 12: education_name
                "\"FEE\" TEXT," + // 13: fee
                "\"DURATION\" TEXT," + // 14: duration
                "\"GENDER\" TEXT," + // 15: gender
                "\"AGE\" TEXT," + // 16: age
                "\"CREATED\" TEXT," + // 17: created
                "\"LNG\" TEXT," + // 18: lng
                "\"LAT\" TEXT," + // 19: lat
                "\"DISTANCE\" TEXT," + // 20: distance
                "\"STATUS\" TEXT);"); // 21: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"XUQIU_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, XuqiuEntity entity) {
        stmt.clearBindings();
 
        String publisher_id = entity.getPublisher_id();
        if (publisher_id != null) {
            stmt.bindString(1, publisher_id);
        }
 
        String publisher_name = entity.getPublisher_name();
        if (publisher_name != null) {
            stmt.bindString(2, publisher_name);
        }
 
        String publisher_headimg = entity.getPublisher_headimg();
        if (publisher_headimg != null) {
            stmt.bindString(3, publisher_headimg);
        }
 
        String publisher_gender = entity.getPublisher_gender();
        if (publisher_gender != null) {
            stmt.bindString(4, publisher_gender);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(5, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String service_type_txt = entity.getService_type_txt();
        if (service_type_txt != null) {
            stmt.bindString(7, service_type_txt);
        }
 
        String grade_id = entity.getGrade_id();
        if (grade_id != null) {
            stmt.bindString(8, grade_id);
        }
 
        String grade_name = entity.getGrade_name();
        if (grade_name != null) {
            stmt.bindString(9, grade_name);
        }
 
        String course_id = entity.getCourse_id();
        if (course_id != null) {
            stmt.bindString(10, course_id);
        }
 
        String course_name = entity.getCourse_name();
        if (course_name != null) {
            stmt.bindString(11, course_name);
        }
 
        String education_id = entity.getEducation_id();
        if (education_id != null) {
            stmt.bindString(12, education_id);
        }
 
        String education_name = entity.getEducation_name();
        if (education_name != null) {
            stmt.bindString(13, education_name);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(14, fee);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(15, duration);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(16, gender);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(17, age);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(18, created);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(19, lng);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(20, lat);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(21, distance);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(22, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public XuqiuEntity readEntity(Cursor cursor, int offset) {
        XuqiuEntity entity = new XuqiuEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // publisher_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // publisher_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // publisher_headimg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // publisher_gender
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // service_type_txt
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // grade_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // grade_name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // course_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // course_name
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // education_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // education_name
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fee
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // duration
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // gender
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // age
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // created
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // lng
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // lat
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // distance
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, XuqiuEntity entity, int offset) {
        entity.setPublisher_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPublisher_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPublisher_headimg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPublisher_gender(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setService_type_txt(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGrade_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGrade_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCourse_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCourse_name(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEducation_id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEducation_name(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFee(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDuration(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setGender(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAge(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCreated(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLng(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLat(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDistance(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setStatus(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(XuqiuEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(XuqiuEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
